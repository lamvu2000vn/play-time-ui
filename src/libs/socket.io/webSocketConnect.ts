import {WebSocketTransport} from "@/helpers/shared/types";
import socket from "./socket";

export const webSocketConnect = async (transport?: WebSocketTransport): Promise<boolean> => {
    try {
        if (!socket.connected) {
            // Th·ª±c hi·ªán k·∫øt n·ªëi
            socket.connect();

            // Ch·ªù k·∫øt n·ªëi th√†nh c√¥ng
            await new Promise<void>((resolve, reject) => {
                const timer = setTimeout(() => {
                    reject(new Error("K·∫øt n·ªëi th·∫•t b·∫°i sau 5 gi√¢y."));
                }, 5000); // Timeout sau 5 gi√¢y

                socket.on("connect", () => {
                    clearTimeout(timer);
                    resolve();
                });

                socket.on("connect_error", (err) => {
                    clearTimeout(timer);
                    reject(err);
                });
            });
        }

        // Logic ki·ªÉm tra v√† x·ª≠ l√Ω sau khi ƒë√£ k·∫øt n·ªëi
        if (socket.connected) {
            let timerId: NodeJS.Timeout | null = null;

            timerId = setTimeout(() => {
                return transport === "websocket";
            }, 5000);

            socket.io.engine.on("upgrade", (upgradedTransport) => {
                if (timerId) clearTimeout(timerId);
                return webSocketConnect(upgradedTransport.name as WebSocketTransport);
            });

            return true; // Tr·∫£ v·ªÅ true n·∫øu k·∫øt n·ªëi th√†nh c√¥ng
        }

        return false; // Tr·∫£ v·ªÅ false n·∫øu kh√¥ng th·ªÉ k·∫øt n·ªëi
    } catch (err) {
        console.log("üöÄ ~ webSocketConnect ~ err:", err);
        return false;
    }
};
